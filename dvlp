#!/usr/bin/env bash

#  dvlp - v0.0.1
#  A command line tool for managing local projects.
#  Copyright (C) Kyle Brumm <http://kylebrumm.com>



# -------------------------------------------------------
# DVLP VARIABLES
# -------------------------------------------------------

VERSION="0.0.1"
RED=$(tput setaf 1);
GREEN=$(tput setaf 2);
YELLOW=$(tput setaf 3);
WHITE=$(tput setaf 7);
RESET=$(tput sgr0);

DVLP_INSTALL_PATH="${BASH_SOURCE[0]}"
DVLP_INSTALL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DVLP_DIR="$HOME/.dvlp"
DVLP_CONFIG="$DVLP_DIR/config"



# -------------------------------------------------------
# DVLP HELPER FUNCTIONS
# -------------------------------------------------------

# Throw an error
error() {
    i=0
    while [ "$i" -lt "$2" ]; do
        printf "    "
        i=$[$i+1]
    done
    printf "${RED}Error:${WHITE} ${1}\n"
    exit
}

strip_trailing_slash() {
    result="$1"

    if [[ "$1" == */ ]]; then
        result=$(echo "$1" | rev | cut -c 2- | rev)
    fi

    echo "$result"
}

# Set up the necessary config variables
setup_project_config() {
    # Source the project config file if it exists
    if [ -f "$DVLP_DIR/$1" ]; then
        source "$DVLP_DIR/$1"
    fi
}



# -------------------------------------------------------
# DVLP COMMANDS
# -------------------------------------------------------

# HELP: Display the help information
dvlp_help() {
cat <<EOF

dvlp - v${VERSION}

A command line tool for managing local projects.

Usage:
    dvlp init
    dvlp start <project>

Tasks:
    cleanup          Remove all the config files
    init             Set up the project files
    list             List all available projects
    start            Set up a project
        <project>    Name of the project you want to work on
    update           Download the latest version of dvlp
    version          Display the current version

EOF
exit;
}

# VERSION: Display the current version
dvlp_version() {
    printf "v$VERSION\n"
}

# INIT: Set up the project files
dvlp_init() {
    printf "${GREEN}==> Init${WHITE}\n"

    if [ $is_setup = true ]; then
        error "You have already run the setup task." 0
    fi

    # Create directory if it doesn't exist
    if [ ! -d "$DVLP_DIR" ]; then
        printf "${GREEN}Creating directory:${WHITE} $DVLP_DIR\n"
        mkdir $DVLP_DIR
    fi

    # Create config file if it doesn't exist
    if [ ! -f "$DVLP_CONFIG" ]; then
        read -ep "DVLP_TASKS: (editor,terminal,finder) " tasks
        [ -z "$tasks" ] && tasks="editor,terminal,finder"

        read -ep "DVLP_EDITOR: (sublime) " editor
        [ -z "$editor" ] && editor="sublime"

        read -ep "DVLP_TERMINAL: (iterm) " terminal
        [ -z "$terminal" ] && terminal="iterm"

        read -ep "DVLP_PROJECT_DIR: (/www/sites/) " project_dir
        [ -z "$project_dir" ] && project_dir="/www/sites/"

        # Verify the users input
        printf "\n"
        printf "The following will be written to $DVLP_CONFIG:\n"
        printf "DVLP_TASKS=\"$tasks\"\n"
        printf "DVLP_EDITOR=\"$editor\"\n"
        printf "DVLP_TERMINAL=\"$terminal\"\n"
        printf "DVLP_PROJECT_DIR=\"$project_dir\"\n"
        printf "\n"

        # Confirm
        read -ep "Everything look good? (Y/n): " good_to_go
        case $good_to_go in
            [Nn]* )
                printf "${YELLOW}Skipping default config setup...${WHITE}\n"
                ;;
            * )
                printf "${GREEN}Creating config file:${WHITE} $DVLP_CONFIG\n"
                touch $DVLP_CONFIG
cat > $DVLP_CONFIG <<EOF
# Default Tasks
# Be sure to separate each task with a comma
DVLP_TASKS="$tasks"

# Default Editor
# Options: "sublime, atom, brackets, textmate, coda"
DVLP_EDITOR="$editor"

# Default Terminal
# Options: "iterm, terminal"
DVLP_TERMINAL="$terminal"

# Projects Directory
# The folder your local projects are in.
DVLP_PROJECT_DIR="$project_dir"
EOF
                ;;
        esac
    fi

    printf "\n${YELLOW}The default config file can be modified at \"$DVLP_CONFIG\"\n"
}

# CLEANUP: Cleanup config files
dvlp_cleanup() {
    printf "This will remove all configuration files.\n"
    read -ep "Are you sure you want to run the cleanup? (y/N): " cleanup
    printf "${GREEN}==> Cleanup${WHITE}\n"
    case $cleanup in
        [Yy]* )
            printf "${YELLOW}Removing configuration files...${WHITE}\n"
            rm -rf $DVLP_DIR
            ;;
        * )
            printf "${YELLOW}Skipping cleanup...${WHITE}\n"
            ;;
    esac
}

# START: Set up a project
dvlp_start() {
    project="$2"
    printf "${GREEN}==> Start project $project${WHITE}\n"

    # Get project specific config
    setup_project_config $project

    echo "Tasks: $DVLP_TASKS"
    echo "Editor: $DVLP_EDITOR"
    echo "Terminal: $DVLP_TERMINAL"

    # Parse and loop through the list of tasks
    IFS=',' read -ra TASKS <<< "$DVLP_TASKS"
    for t in "${TASKS[@]}"; do
        # TODO
        # Perform the necessary command
        echo "$t"
    done

    # Create a new tab, print working directory, split it in half, run grunt
    # osascript -e '
    #     activate application "'$DEFAULT_TERMINAL'"
    #     tell application "System Events" to keystroke "t" using command down
    #     tell application "'$DEFAULT_TERMINAL'" to tell session -1 of current terminal to write text "pwd"
    #     tell application "System Events" to keystroke "d" using {command down, shift down}
    #     tell application "'$DEFAULT_TERMINAL'" to tell session -1 of current terminal to write text "grunt"
    # '
}

# LIST: List all available projects
dvlp_list() {
    printf "${GREEN}==> List${WHITE}\n"

    # TODO
    # List all the current project configurations
}

# UPDATE: Update to the latest version of dvlp
dvlp_update() {
    read -ep "Are you sure you want to update dvlp? (y/N): " update
    printf "${GREEN}==> Update${WHITE}\n"
    case $update in
        [Yy]* )
            # Remove the old script
            printf "${YELLOW}Removing old script at \"$DVLP_INSTALL_PATH\"...${WHITE}\n"
            rm $DVLP_INSTALL_PATH

            # Download the new script
            printf "    ${YELLOW}Downloading new script to \"$DVLP_INSTALL_DIR/dvlp\"...${WHITE}\n"
            curl -s https://raw.githubusercontent.com/kjbrum/dvlp/master/dvlp > $DVLP_INSTALL_DIR/dvlp
            chmod +x $DVLP_INSTALL_DIR/dvlp
            ;;
        * )
            printf "${YELLOW}Skipping update...${WHITE}\n"
            ;;
    esac
}



# -------------------------------------------------------
# DVLP INITIALIZATION
# -------------------------------------------------------

# Check if help info should be displayed
if [ "$1" = "-h" -o "$1" = "--help" -o -z "$1" ]; then
    dvlp_help;
fi

# Check if the necessary files are set up
if [ -f "$DVLP_CONFIG" ]; then
    is_setup=true

    # Source the config file
    source "$DVLP_CONFIG"

    # Remove the trailing slash from the DVLP_PROJECT_DIR variable
    DVLP_PROJECT_DIR=$(strip_trailing_slash "$DVLP_PROJECT_DIR")
else
    is_setup=false

    if [ "$1" != "init" -a "$1" != "version" ]; then
        error "You need to run \"dvlp init\" to get things set up." 0
    fi
fi

# See what command we need to run
case "$1" in
    cleanup)    dvlp_cleanup;;
    init)       dvlp_init "$@";;
    list)       dvlp_list "$@";;
    start)      dvlp_start "$@";;
    update)     dvlp_update;;
    version)    dvlp_version;;
    *)          printf "${RED}Error:${WHITE} Illegal task -- $1 (see \"dvlp --help\" for help)\n";;
esac
