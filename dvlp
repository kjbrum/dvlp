#!/usr/bin/env bash

#  dvlp - v0.0.1
#  A command line tool for managing local projects.
#  Copyright (C) Kyle Brumm <http://kylebrumm.com>



# -------------------------------------------------------
# DVLP VARIABLES
# -------------------------------------------------------

VERSION="0.0.1"
RED=$(tput setaf 1);
GREEN=$(tput setaf 2);
YELLOW=$(tput setaf 3);
WHITE=$(tput setaf 7);
RESET=$(tput sgr0);

DVLP_INSTALL_PATH="${BASH_SOURCE[0]}"
DVLP_INSTALL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DVLP_DIR="$HOME/.dvlp"
DVLP_CONFIG="$DVLP_DIR/config"



# -------------------------------------------------------
# DVLP HELPER FUNCTIONS
# -------------------------------------------------------

# Throw an error
error() {
    printf "${RED}Error:${WHITE} ${1}\n"
    exit
}

# Throw a warning
warn() {
    printf "${YELLOW}${1}${WHITE}\n"
}

# Throw a success message
success() {
    printf "${GREEN}${1}${WHITE}\n"
}

# Remove the trailing slash from a string, if it exists
strip_trailing_slash() {
    result="$1"

    if [[ "$1" == */ ]]; then
        result=$(echo "$1" | rev | cut -c 2- | rev)
    fi

    echo "$result"
}

# Set up the necessary config variables
setup_project_config() {
    # Source the project config file if it exists
    if [ -f "$DVLP_DIR/$1" ]; then
        source "$DVLP_DIR/$1"
    fi
}

# Handle running the tasks
trigger_task() {
    project="$1"
    task="$2"

    case "$task" in
        editor)
            # Open the project directory in the default editor
            osascript -e '
                tell application "'"$DVLP_EDITOR"'"
                    activate

                    open "'"$DVLP_PROJECT_DIR"'/'"$project"'"

                    tell application "System Events" to keystroke "f" using {command down, control down}
                end tell
            '
            ;;
        finder)
            # Open a Finder window at the project directory
            osascript -e '
                tell application "Finder"
                    open ("'"$DVLP_PROJECT_DIR"'/'"$project"'" as POSIX file)
                end tell
            '
            ;;
        terminal)
            # Open a new tab at the project directory
            osascript -e '
                tell application "'"$DVLP_TERMINAL"'"
                    activate

                    tell application "System Events" to keystroke "t" using command down

                    set _session to current session of current terminal

                    tell _session
                        write text "cd '"$DVLP_PROJECT_DIR"'/'"$project"'"

                        delay 2

                        tell application "System Events" to keystroke "d" using {command down, shift down}
                    end tell
                end tell
            '
            ;;
        '')
            error "No tasks are set for this project"
            ;;
        *)
            error "Invalid task -- $1 (see \"dvlp --help\" for help)"
            ;;
    esac
}


# -------------------------------------------------------
# DVLP COMMANDS
# -------------------------------------------------------

# CLEANUP: Remove all the config files
dvlp_cleanup() {

    if [ "$2" ]; then
        if [ -f "$DVLP_DIR/$2" ]; then
            success "==> Cleanup $2${WHITE}"
            rm "$DVLP_DIR/$2"
            warn "Removed \"$2\" config file"
        else
            warn "A config file for \"$2\" doesn't exist"
        fi
    else
        printf "This will remove all configuration files.\n"
        read -ep "Are you sure you want to run the cleanup? (y/N): " cleanup
        case $cleanup in
            [Yy]* )
                success "==> Cleanup${WHITE}"
                warn "Removing config files..."
                rm -rf $DVLP_DIR
                ;;
            * )
                warn "Skipped cleanup"
                ;;
        esac
    fi
}

# CONFIG: Set up the config file for a specific project
dvlp_config() {
    project="$2"

    # Check if a project name was supplied
    if [ -z "$project" ]; then
        error "You need to supply a project name."
    fi

    success "Creating a config file for $project:"

    read -ep "DVLP_TASKS: (editor,terminal,finder) " tasks
    [ -z "$tasks" ] && tasks="editor,terminal,finder"

    read -ep "DVLP_EDITOR: (sublime text) " editor
    [ -z "$editor" ] && editor="sublime text"

    read -ep "DVLP_TERMINAL: (iterm) " terminal
    [ -z "$terminal" ] && terminal="iterm"

    # Verify the users input
    printf "\n"
    printf "The following will be written to $DVLP_DIR/$project:\n"
    printf "DVLP_TASKS=\"$tasks\"\n"
    printf "DVLP_EDITOR=\"$editor\"\n"
    printf "DVLP_TERMINAL=\"$terminal\"\n"
    printf "\n"

    # Confirm
    read -ep "Everything look good? (Y/n): " good_to_go
    case $good_to_go in
        [Nn]* )
            warn "Skipping project config setup..."
            ;;
        * )
            success "Creating $project config file..."
            touch $DVLP_DIR/$project
cat > $DVLP_DIR/$project <<EOF
# Project Tasks
DVLP_TASKS="$tasks"

# Project Editor
DVLP_EDITOR="$editor"

# Project Terminal
DVLP_TERMINAL="$terminal"
EOF
            ;;
    esac
}

# HELP: Display the help information
dvlp_help() {
cat <<EOF

dvlp - v${VERSION}

A command line tool for managing local projects.

Usage:
    dvlp init
    dvlp config <project>
    dvlp start <project>

Tasks:
    cleanup          Remove all config files
        <project>    Name of the project of which you want to remove config files
    config           Set up the config file for a specific project
        <project>    Name of the project you want to run
    init             Initialize necessary config files
    list             List all projects with config files
    start            Run a project's tasks
        <project>    Name of the project you want to run
    update           Download the latest version of dvlp
    version          Display the current version

EOF
exit;
}

# INIT: Set up the project files
dvlp_init() {
    success "==> Init${WHITE}"

    if [ $is_setup = true ]; then
        error "You have already run the setup task."
    fi

    # Create directory if it doesn't exist
    if [ ! -d "$DVLP_DIR" ]; then
        success "Creating directory"
        mkdir $DVLP_DIR
    fi

    # Create config file if it doesn't exist
    if [ ! -f "$DVLP_CONFIG" ]; then
        read -ep "DVLP_TASKS: (editor,terminal,finder) " tasks
        [ -z "$tasks" ] && tasks="editor,terminal,finder"

        read -ep "DVLP_EDITOR: (sublime text) " editor
        [ -z "$editor" ] && editor="sublime text"

        read -ep "DVLP_TERMINAL: (iterm) " terminal
        [ -z "$terminal" ] && terminal="iterm"

        read -ep "DVLP_PROJECT_DIR: (/www/sites/) " project_dir
        [ -z "$project_dir" ] && project_dir="/www/sites/"

        # Verify the users input
        printf "\n"
        printf "The following will be written to $DVLP_CONFIG:\n"
        printf "DVLP_TASKS=\"$tasks\"\n"
        printf "DVLP_EDITOR=\"$editor\"\n"
        printf "DVLP_TERMINAL=\"$terminal\"\n"
        printf "DVLP_PROJECT_DIR=\"$project_dir\"\n"
        printf "\n"

        # Confirm
        read -ep "Everything look good? (Y/n): " good_to_go
        case $good_to_go in
            [Nn]* )
                warn "Skipping default config setup..."
                ;;
            * )
                success "Creating default config file"
                touch $DVLP_CONFIG
cat > $DVLP_CONFIG <<EOF
# Default Tasks
# Be sure to separate each task with a comma
DVLP_TASKS="$tasks"

# Default Editor
# Options: "sublime, atom, brackets, textmate, coda"
DVLP_EDITOR="$editor"

# Default Terminal
# Options: "iterm, terminal"
DVLP_TERMINAL="$terminal"

# Projects Directory
# The folder your local projects are in.
DVLP_PROJECT_DIR="$project_dir"
EOF
                ;;
        esac
    fi

    warn "\nThe default config file can be modified at \"$DVLP_CONFIG\""
}

# LIST: List all available projects
dvlp_list() {
    success "==> List"

    # TODO
    # List all the current project configurations
}

# START: Set up a project
dvlp_start() {
    project="$2"

    # Check if a project name was supplied
    if [ -z "$project" ]; then
        error "You need to supply a project name."
    fi

    success "==> Starting $project"

    # Get project specific config
    setup_project_config $project

    # Parse and loop through the list of tasks
    IFS=',' read -ra TASKS <<< "$DVLP_TASKS"
    for t in "${TASKS[@]}"; do
        # Trigger the necessary task
        trigger_task "$project" "$t"
    done
}

# UPDATE: Update to the latest version of dvlp
dvlp_update() {
    read -ep "Are you sure you want to update dvlp? (y/N): " update
    case $update in
        [Yy]* )
            success "==> Update"
            # Remove the old script
            warn "Removing old script at \"$DVLP_INSTALL_PATH\"..."
            rm $DVLP_INSTALL_PATH

            # Download the new script
            warn "Downloading new script to \"$DVLP_INSTALL_DIR/dvlp\"..."
            curl -s https://raw.githubusercontent.com/kjbrum/dvlp/master/dvlp > $DVLP_INSTALL_DIR/dvlp
            chmod +x $DVLP_INSTALL_DIR/dvlp
            ;;
        * )
            warn "Skipping update..."
            ;;
    esac
}

# VERSION: Display the current version
dvlp_version() {
    printf "v$VERSION\n"
}



# -------------------------------------------------------
# DVLP INITIALIZATION
# -------------------------------------------------------

# Check if help info should be displayed
if [ "$1" = "-h" -o "$1" = "--help" -o -z "$1" ]; then
    dvlp_help;
fi

# Check if the necessary files are set up
if [ -f "$DVLP_CONFIG" ]; then
    is_setup=true

    # Source the config file
    source "$DVLP_CONFIG"

    # Remove the trailing slash from the DVLP_PROJECT_DIR variable
    DVLP_PROJECT_DIR=$(strip_trailing_slash "$DVLP_PROJECT_DIR")
else
    is_setup=false

    if [ "$1" != "init" -a "$1" != "version" ]; then
        error "You need to run \"dvlp init\" to get things set up."
    fi
fi

# See what command we need to run
case "$1" in
    cleanup)    dvlp_cleanup "$@";;
    config)     dvlp_config "$@";;
    init)       dvlp_init "$@";;
    list)       dvlp_list "$@";;
    start)      dvlp_start "$@";;
    update)     dvlp_update;;
    version)    dvlp_version;;
    *)          error "Illegal command -- $1 (see \"dvlp --help\" for help)";;
esac
