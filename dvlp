#!/usr/bin/env bash

#  dvlp - v0.0.1
#  A command line tool for managing local projects.
#  Copyright (C) Kyle Brumm <http://kylebrumm.com>

# -------------------------------------------------------
# DVLP VARIABLES
# -------------------------------------------------------

VERSION="0.0.1"
RED=$(tput setaf 1);
GREEN=$(tput setaf 2);
YELLOW=$(tput setaf 3);
WHITE=$(tput setaf 7);
RESET=$(tput sgr0);

DVLP_DIR="$HOME/.dvlp"
DVLP_CONFIG="$DVLP_DIR/config"



# -------------------------------------------------------
# DVLP HELPER FUNCTIONS
# -------------------------------------------------------

# Throw an error
error() {
    i=0
    while [ "$i" -lt "$2" ]; do
        printf "    "
        i=$[$i+1]
    done
    printf "${RED}Error:${WHITE} ${1}\n"
    exit
}

# Check if the init task has been run
check_setup() {
    if [ "$is_setup" != true -a "$1" != "init" -a "$1" != "version" ]; then
        error "You need to run \"dvlp init\" to get things set up." 0
    fi
}

strip_trailing_slash() {
    result="$1"

    if [[ "$1" == */ ]]; then
        result=$(echo "$1" | rev | cut -c 2- | rev)
    fi

    echo $result
}

if [ -f "$DVLP_CONFIG" ]; then
    is_setup=true

    # Source the config file
    source $DVLP_CONFIG

    # Remove the trailing slash from the PROJECT_DIR variable
    PROJECT_DIR=$(strip_trailing_slash $PROJECT_DIR)
else
    is_setup=false
fi



# -------------------------------------------------------
# DVLP TASKS
# -------------------------------------------------------

# HELP: Display the help information
dvlp_help() {
cat <<EOF

dvlp - v${VERSION}

A command line tool for managing local projects.

Usage:
    dvlp init
    dvlp start <project>

Tasks:
    version          Display the current version
    init             Set up the project files
    cleanup          Cleanup config files
    start            Set up a project
        <project>    Name of the project you want to work on
    list             List all available projects

Options:
    --no-editor      Skip opening the editor
    --no-terminal    Skip opening the terminal
    --no-finder      Skip opening Finder

EOF
exit;
}

# VERSION: Display the current version
dvlp_version() {
    printf "v$VERSION\n"
}

# INIT: Set up the project files
dvlp_init() {
    printf "${GREEN}==> Init${WHITE}\n"

    if [ $is_setup = true ]; then
        error "You have already run the setup task." 1
    fi

    # Create directory if it doesn't exist
    if [ ! -d "$DVLP_DIR" ]; then
        printf "    ${GREEN}Creating directory:${WHITE} $DVLP_DIR\n"
        mkdir $DVLP_DIR
    fi

    # Create config file if it doesn't exist
    if [ ! -f "$DVLP_CONFIG" ]; then
        printf "    ${GREEN}Creating config file:${WHITE} $DVLP_CONFIG\n"
        touch $DVLP_CONFIG

cat > $DVLP_CONFIG <<EOF
# Default tasks to run
# Be sure to separate each task with a comma
# Options: "editor,terminal,finder"
DEFAULT_TASKS="editor,terminal,finder"

# Editor of choice
# Options: "sublime, atom, brackets, textmate, coda"
DEFAULT_EDITOR="sublime"

# Terminal of choice
# Options: "iterm, terminal"
DEFAULT_TERMINAL="iterm"

# Project folder
# Where are your project folders located?
PROJECT_DIR="/www/sites/"
EOF
    fi
}

# CLEANUP: Cleanup config files
dvlp_cleanup() {
    while true; do
        read -ep "This will remove all configuration files. Are you sure you want to run the cleanup? (y/N): " cleanup
        printf "${GREEN}==> Cleanup${WHITE}\n"
        case $cleanup in
            [Yy]* )
                printf "    ${GREEN}Removing configuration files...${WHITE}\n"
                rm -rf $DVLP_DIR
                break;;
            * )
                printf "    ${YELLOW}Skipping cleanup...${WHITE}\n"
                break;;
        esac
    done
}

# START: Set up a project
dvlp_start() {
    printf "${GREEN}==> Start project $2${WHITE}\n"

    # TODO
    # Get the list of tasks to run, and do it

    # Create a new tab, print working directory, split it in half, run grunt
    osascript -e '
        activate application "'$DEFAULT_TERMINAL'"
        tell application "System Events" to keystroke "t" using command down
        tell application "'$DEFAULT_TERMINAL'" to tell session -1 of current terminal to write text "pwd"
        tell application "System Events" to keystroke "d" using {command down, shift down}
        tell application "'$DEFAULT_TERMINAL'" to tell session -1 of current terminal to write text "grunt"
    '
}

# LIST: List all available projects
dvlp_list() {
    printf "${GREEN}==> List${WHITE}\n"

    # TODO
    # List all the current project configurations
}



# -------------------------------------------------------
# DVLP INITIALIZATION
# -------------------------------------------------------

# Check if help info should be displayed
if [ "$1" = "-h" -o "$1" = "--help" -o -z "$1" ]; then
    dvlp_help;
fi

# Check if the necessary files are set up
check_setup "$1"

# See what task we need to run
case "$1" in
    version)    dvlp_version;;
    init)       dvlp_init "$@";;
    cleanup)    dvlp_cleanup;;
    start)      dvlp_start "$@";;
    list)       dvlp_list "$@";;
    *)          printf "${RED}Error:${WHITE} Illegal task -- $1 (see \"dvlp --help\" for help)\n";;
esac
